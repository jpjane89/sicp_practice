#lang racket

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define (last-pair l)
  (list (list-ref l (- (length l) 1))))

(define (reverse l)
  (define (loop desc-list asc-list)
    (if (null? desc-list) asc-list
        (loop (cdr desc-list) (cons (car desc-list) asc-list))))
  
  
  
  `ed=-=p84