2.7

(define (make-interval a b) (cons a b))

(define (lower-bound interval)
  (min (car interval) (cdr interval)))

(define (upper-bound interval)
  (max (car interval) (cdr interval)))

2.8

(define (sub-interval x y)
  (let ((p1 (- (lower-bound x) (upper-bound y)))
  		(p2 (- (lower-bound y) (upper-bound x)))
  		(p3 (- (upper-bound x) (lower-bound y)))
  		(p4 (- (upper-bound y) (lower-bound x))))
  (make-interval (min p1 p2) (max p3 p4))))

2.9

(define (width interval)
  (/ (- (upper-bound interval) (lower-bound interval)) 2))

2.10

(define (div-interval x y)
  (if (and (<= (lower-bound y) 0) (>0 (upper-bound y) 0)) (error "division error") 
  (mul-interval x
                (make-interval (/ 1.0 (upper-bound y))
                               (/ 1.0 (lower-bound y))))))

2.11

case:
1) negative, mixed -> l=u*u, u=u*l
2) negative, postive -> l=u*u, u=l*l
3) negative, negative -> l=l*l, u=u*u
4) positive, mixed -> l=u*l, u=u*u 
5) positive, positive -> l=l*l, u=u*u
6) positive, negative -> l=u*l, u=l*u
7) mixed, positive -> l=l*u, u=u*u
8) mixed, mixed -> multiple
9) mixed, negative -> l=u*l, u=l*u

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

Redo of 2.6

 (define (add a b) 
   (lambda (f) 
     (lambda (x) 
       ((a f) ((b f) x))))) 


LOOK UP FUNCTION COMPOSITION (!)

